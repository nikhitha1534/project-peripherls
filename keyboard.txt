import cv2
import mediapipe as mp
import pyautogui
import time

class HandDetector:
    def __init__(self, staticMode=False, maxHands=2, modelComplexity=1, detectionCon=0.7, minTrackCon=0.7):
        self.hands = mp.solutions.hands.Hands(
            static_image_mode=staticMode,
            max_num_hands=maxHands,
            model_complexity=modelComplexity,
            min_detection_confidence=detectionCon,
            min_tracking_confidence=minTrackCon
        )
        self.mpDraw = mp.solutions.drawing_utils
        self.textTyped = ""
        self.lastPressedKey = None
        self.lastClickTime = time.time()
        self.currentKey = None
        self.shiftActive = False

    def findHands(self, img):
        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = self.hands.process(imgRGB)
        handsList = []
        h, w, c = img.shape

        if results.multi_hand_landmarks:
            for handLms in results.multi_hand_landmarks:
                lmList = [[int(lm.x * w), int(lm.y * h)] for lm in handLms.landmark]
                handsList.append(lmList)
                self.mpDraw.draw_landmarks(img, handLms, mp.solutions.hands.HAND_CONNECTIONS)
        return handsList, img

    def drawKeyboard(self, img):
        keyboard = [
            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace'],
            ['Tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\'],
            ['Caps', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', "'", 'Enter'],
            ['Shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/', 'Shift'],
            ['Space']
        ]

        keyWidth = 60
        keyHeight = 60
        offsetX = 100
        offsetY = 200

        for rowIdx, row in enumerate(keyboard):
            for colIdx, key in enumerate(row):
                x = offsetX + colIdx * (keyWidth + 10)
                y = offsetY + rowIdx * (keyHeight + 10)

                cv2.rectangle(img, (x, y), (x + keyWidth, y + keyHeight), (200, 200, 200), -1)

                # Highlight last clicked key
                if key == self.lastPressedKey and time.time() - self.lastClickTime < 0.5:
                    cv2.rectangle(img, (x, y), (x + keyWidth, y + keyHeight), (0, 255, 0), -1)

                cv2.rectangle(img, (x, y), (x + keyWidth, y + keyHeight), (255, 255, 255), 2)
                cv2.putText(img, key, (x + 10, y + 40), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

        return img

    def detectKeyPress(self, x, y):
        keyboard = [
            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace'],
            ['Tab', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\'],
            ['Caps', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', "'", 'Enter'],
            ['Shift', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/', 'Shift'],
            ['Space']
        ]

        keyWidth = 60
        keyHeight = 60
        offsetX = 100
        offsetY = 200
        debounceTime = 0.2  # Faster response time

        for rowIdx in range(len(keyboard)):
            for colIdx in range(len(keyboard[rowIdx])):
                keyX = offsetX + colIdx * (keyWidth + 10)
                keyY = offsetY + rowIdx * (keyHeight + 10)

                if keyX < x < keyX + keyWidth and keyY < y < keyY + keyHeight:
                    key = keyboard[rowIdx][colIdx]

                    if key != self.currentKey or time.time() - self.lastClickTime > debounceTime:
                        self.currentKey = key
                        self.lastClickTime = time.time()

                        if key == "Space":
                            self.textTyped += " "
                            pyautogui.write(" ")
                        elif key == "Enter":
                            self.textTyped += "\n"
                            pyautogui.press("enter")
                        elif key == "Backspace":
                            self.textTyped = self.textTyped[:-1]
                            pyautogui.press("backspace")
                        elif key == "Shift":
                            self.shiftActive = not self.shiftActive
                        else:
                            if self.shiftActive:
                                key = key.upper()
                                self.shiftActive = False
                            self.textTyped += key
                            pyautogui.write(key)

                        self.lastPressedKey = key
                    return key
        return None

    def showText(self, img):
        cv2.rectangle(img, (40, 30), (800, 100), (255, 255, 255), -1)
        cv2.putText(img, self.textTyped, (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 0), 2)
        return img


cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
cap.set(3, 1280)
cap.set(4, 720)

detector = HandDetector()
keyboardVisible = True

while True:
    success, img = cap.read()
    if not success:
        continue  # Ensures loop continues instead of crashing

    img = cv2.flip(img, 1)
    hands, img = detector.findHands(img)

    if keyboardVisible:
        img = detector.drawKeyboard(img)
        if hands:
            for hand in hands:
                if len(hand) > 8:  # Ensure index finger landmark is available
                    x, y = hand[8][0], hand[8][1]
                    detector.detectKeyPress(x, y)

    img = detector.showText(img)
    cv2.imshow("Virtual Keyboard", img)

    key = cv2.waitKey(1) & 0xFF
    if key == 27:  # Press 'ESC' to exit
        break
cap.release()
cv2.destroyAllWindows